1- Bir listeyi düzleştiren (flatten) fonksiyon yazın.
Elemanları birden çok katmanlı listelerden ([[3],2] gibi) oluşabileceği gibi, non-scalar verilerden de oluşabilir. Örnek olarak:

input: [[1,'a',['cat'],2],[[[3]],'dog'],4,5]

output: [1,'a','cat',2,3,'dog',4,5]
çözüm:
------
def flatten(x):
    flatten_l=[]
    for i in x:
        if type(i)==list: """ i parametremiz x i tarayacak ve sırayla elemanların
                                #liste ise elemanı tekrar fonksiyona sokması için"""
            flatten_l.extend(flatten(i)) # eğer eklenen eleman liste ise tekrardan fonksiyonun içine sokması için
        else:
            flatten_l.append(i) # eleman liste değilse direkt listemize ekle
    return flatten_l
l=[[1,'a',['cat'],2],[[[3]],'dog'],4,5]
flatten_l=flatten(l) #fonksiyon içinde açtığımız listeyi girilen listenin fonksiyona girilmesi
print(flatten_l)
--------------------------------------------------------------------------------------------------------------------------------------------------
2- Verilen listenin içindeki elemanları tersine döndüren bir fonksiyon yazın. 
Eğer listenin içindeki elemanlar da liste içeriyorsa onların elemanlarını da tersine döndürün. Örnek olarak:

input: [[1, 2], [3, 4], [5, 6, 7]]

output: [[[7, 6, 5], [4, 3], [2, 1]]
Çözüm:
------
def reverse(x):
    l2=[]
    x=x[::-1] #x parametremiz yani burada liste olacak indekslerin tersten yazılması yani reverse edilmesi
    for a in x:
        if type(a)==list: #x parametresinde yer alaman elamanlar liste ise, yani liste içinde
                            #liste var ise bunun kontrolü yapılması
            a=a[::-1] #kontrolü yapılan x parametresinin elemanlarının liste olanlarının da kendi içinde reverse edilmesi.
            l2.append(a) #elamanların listeye eklenmesi
    return l2
l=[[1, 2], [3, 4], [5, 6, 7]]
l=reverse(l) #l listesinin reverse(x) fonksiyonunda yerine yazılıp l listesine eşitlenmesi
print(l)
